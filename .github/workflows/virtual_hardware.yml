# This workflow is triggered whenever "Caller Arm Virtual Hardware" workflow is completed (which is called by PR).
# This workflow ideally should be triggered also by PR, but forked PR has limited permissions which does not
# allow to use `configure-aws-credentials` actions and using secrets.
# It will update its status back to the caller PR as "Arm Virtual Hardware" check name

# The repository needs to provide the following secrets
# - AWS Access - Settings and credentials to access AWS services for running Arm Virtual Hardware
#   - AWS_DEFAULT_REGION          The data center region to be used.
#   - AWS_S3_BUCKET_NAME          The name of the S3 storage bucket to be used for data exchange.
#   - AWS_IAM_PROFILE             The IAM profile to be used.
#   - AWS_ASSUME_ROLE             The AWS access role to be assumed.
#   - AWS_SECURITY_GROUP_ID       The id of the security group to add the EC2 instance to.
#   - AWS_SUBNET_ID               The id of the network subnet to connect the EC2 instance to.
# - IoT Cloud Access - Settings and credentials required to connect an AWS IoT Thing
#   - MQTT_BROKER_ENDPOINT        MQTT broker host name
#   - IOT_THING_NAME              Client (device) name
#   - CLIENT_CERTIFICATE_PEM      Client (device) certificate
#   - CLIENT_PRIVATE_KEY_PEM      Client (device) private key

name: Arm Virtual Hardware
on:
  workflow_dispatch:
    inputs:
      toolboxVersion:
        description: Version of CMSIS-Toolbox to be used.
        type: string
        required: false
        default: ''
  workflow_run:
    workflows:
      - Caller Arm Virtual Hardware
    types:
      - completed
  push:

env:
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
  AWS_IAM_PROFILE: ${{ secrets.AWS_IAM_PROFILE }}
  AWS_SECURITY_GROUP_ID: ${{ secrets.AWS_SECURITY_GROUP_ID }}
  AWS_SUBNET_ID: ${{ secrets.AWS_SUBNET_ID }}
  TOOLBOX_VERSION: ${{ inputs.toolboxVersion || '1.5.0' }}

jobs:
  set_pending_status_to_pr:
    runs-on: ubuntu-latest
    steps:
      - name: Set a pending status to the PR
        if: github.event_name == 'workflow_run'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl --request POST \
            --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.event.workflow_run.head_commit.id }} \
            --header "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            --header 'content-type: application/json' \
            --data '{
              "state": "pending",
              "context": "Arm Virtual Hardware",
              "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id	}}"
              }' \
            --fail

  ci_test:
    runs-on: ubuntu-latest
    needs: set_pending_status_to_pr
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download workflow artifact
        if: github.event_name == 'workflow_run'
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: caller_virtual_hardware.yml
          run_id: ${{ github.event.workflow_run.id }}

      - name: Read the pr_num file
        if: github.event_name == 'workflow_run'
        id: pr_num_reader
        uses: juliangruber/read-file-action@v1.1.6
        with:
          path: ./pr_number/pr_number
          trim: true

      - name: Clone this repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true

      - name: Checkout PR
        if: github.event_name == 'workflow_run'
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          gh pr checkout ${{ steps.pr_num_reader.outputs.content }}

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Python requirements
        run: |
          pip install -r requirements.txt

      - name: Cache CMSIS-Toolbox ${{ env.TOOLBOX_VERSION }} installer
        uses: actions/cache@v3
        id: cmsis-toolbox
        with:
          key: cmsis-toolbox-${{ env.TOOLBOX_VERSION }}
          path: cmsis-toolbox.sh

      - name: Download CMSIS-Toolbox ${{ env.TOOLBOX_VERSION }}
        if: steps.cmsis-toolbox.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/Open-CMSIS-Pack/cmsis-toolbox/releases/download/${{ env.TOOLBOX_VERSION }}/cmsis-toolbox.sh

      - name: Configure AWS IoT Thing Credentials
        env:
          MQTT_BROKER_ENDPOINT: ${{ secrets.MQTT_BROKER_ENDPOINT }}
          IOT_THING_NAME: ${{ secrets.IOT_THING_NAME }}
          CLIENT_CERTIFICATE_PEM: ${{ secrets.CLIENT_CERTIFICATE_PEM }}
          CLIENT_PRIVATE_KEY_PEM: ${{ secrets.CLIENT_PRIVATE_KEY_PEM }}
        run: |
          cd amazon-freertos/demos/include
          cp aws_clientcredential.h aws_clientcredential.h.in
          sed -i 's|\(#define clientcredentialMQTT_BROKER_ENDPOINT \).*""|\1 "${MQTT_BROKER_ENDPOINT}"|' aws_clientcredential.h.in
          sed -i 's|\(#define clientcredentialIOT_THING_NAME \).*""|\1 "${IOT_THING_NAME}"|' aws_clientcredential.h.in
          envsubst <aws_clientcredential.h.in >aws_clientcredential.h
          cp aws_clientcredential_keys.h aws_clientcredential_keys.h.in
          sed -i 's|\(#define keyCLIENT_CERTIFICATE_PEM \).*NULL|\1 ${CLIENT_CERTIFICATE_PEM}|' aws_clientcredential_keys.h.in
          sed -i 's|\(#define keyCLIENT_PRIVATE_KEY_PEM \).*NULL|\1 ${CLIENT_PRIVATE_KEY_PEM}|' aws_clientcredential_keys.h.in
          envsubst <aws_clientcredential_keys.h.in >aws_clientcredential_keys.h

      - uses: ammaraskar/gcc-problem-matcher@master

      - name: Configure AWS AVH Access Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Run Demo
        id: avh
        run: |
          avhclient -b aws execute --specfile avh.yml

      - name: Archive results
        uses: actions/upload-artifact@v3
        with:
          name: results
          path: |
            Demo.log
          retention-days: 1
          if-no-files-found: error
        if: always()

      - name: Check results
        run: |
          grep -q "Demo completed successfully." Demo.log

  set_success_status_to_pr:
    runs-on: ubuntu-latest
    needs: ci_test
    if: success() && github.event_name == 'workflow_run'
    steps:
      - name: Set success status to the PR
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          curl --request POST \
            --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.event.workflow_run.head_commit.id }} \
            --header "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            --header 'content-type: application/json' \
            --data '{
              "state": "success",
              "context": "Arm Virtual Hardware",
              "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id	}}"
              }' \
            --fail

  set_failure_status_to_pr:
    runs-on: ubuntu-latest
    needs: ci_test
    if: failure() && github.event_name == 'workflow_run'
    steps:
      - name: Set failure status to the PR
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          curl --request POST \
            --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.event.workflow_run.head_commit.id }} \
            --header "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            --header 'content-type: application/json' \
            --data '{
              "state": "failure",
              "context": "Arm Virtual Hardware",
              "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id	}}"
              }' \
            --fail
